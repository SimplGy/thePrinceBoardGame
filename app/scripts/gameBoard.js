// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('prince').factory('Space', function() {
    var Space;
    Space = function(location) {
      this.x = location.x;
      return this.y = location.y;
    };
    Space.prototype = {
      x: void 0,
      y: void 0
    };
    return Space;
  }).factory('gameBoard', function(cfg, Space) {
    var api, initialize;
    api = {};
    initialize = function() {
      var space, x, y, _i, _ref, _results;
      api.locations = [];
      api.spaces = [];
      _results = [];
      for (y = _i = 0, _ref = cfg.boardSize; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        api.locations[y] = [];
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = cfg.boardSize; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            space = new Space({
              x: x,
              y: y
            });
            api.spaces.push(space);
            _results1.push(api.locations[y].push);
          }
          return _results1;
        })());
      }
      return _results;
    };
    initialize();
    return api;
  }).directive('gameBoard', function(gameBoard, $window) {
    return {
      restrict: 'E',
      scope: {},
      template: '<b ng-repeat="space in board.spaces" class="space x{{space.x}} y{{space.y}}">{{space.x}}, {{space.y}}</b>',
      link: function(scope, el, attrs) {
        var calculateSize;
        scope.board = gameBoard;
        console.log({
          scope: scope
        });
        calculateSize = function() {
          var size;
          if ($window.innerWidth > $window.innerHeight) {
            size = window.innerHeight;
          } else {
            size = window.innerWidth;
          }
          size = Math.floor(size);
          size -= 40;
          return el.css({
            width: size,
            height: size
          });
        };
        $window.onresize = _.debounce(calculateSize, 200);
        return calculateSize();
      }
    };
  });

}).call(this);
