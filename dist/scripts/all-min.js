// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('prince', []).constant('cfg', {
    title: 'The Prince',
    cellCount: 6
  }).controller('MainController', function(gameBoard, Piece, PieceDefinitions) {
    gameBoard.pieces.push(new Piece({
      type: PieceDefinitions.TYPES.prince,
      x: 2,
      y: 5
    }));
    gameBoard.pieces.push(new Piece({
      type: PieceDefinitions.TYPES.footman,
      x: 2,
      y: 4
    }));
    gameBoard.pieces.push(new Piece({
      type: PieceDefinitions.TYPES.footman,
      x: 3,
      y: 5
    }));
    return gameBoard.pieces.push(new Piece({
      type: PieceDefinitions.TYPES.pikeman,
      x: 5,
      y: 0
    }));
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('prince').factory('PieceDefinitions', function() {
    var ACTIONS, TYPES, definitions;
    TYPES = {
      prince: 'prince',
      footman: 'footman',
      pikeman: 'pikeman'
    };
    ACTIONS = {
      move: 'move',
      slide: 'slide',
      jump: 'jump',
      jumpslide: 'jumpslide',
      strike: 'strike',
      command: 'command'
    };
    definitions = {
      TYPES: TYPES,
      ACTIONS: ACTIONS,
      prince: {
        type: TYPES.prince,
        actions: [
          {
            slide: [-1, 0]
          }, [1, 0], {
            slide: [0, 1]
          }, [0, -1]
        ]
      },
      footman: {
        type: TYPES.footman,
        actions: [
          {
            move: [[0, -1], [1, 0], [0, 1], [-1, 0]]
          }, {
            move: [[0, -2], [-1, -1], [1, 1], [-1, 1], [1, -1]]
          }
        ]
      },
      pikeman: {
        type: TYPES.pikeman,
        actions: [
          {
            move: [[-2, -2], [-1, -1], [1, -1], [2, -2]]
          }, {
            move: [[0, -1], [0, 1], [0, 2]],
            strike: [[-1, -2], [1, -2]]
          }
        ]
      }
    };
    return definitions;
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('prince').factory('Space', function() {
    var Space;
    Space = function(location) {
      this.x = location.x;
      return this.y = location.y;
    };
    Space.prototype = {
      x: void 0,
      y: void 0
    };
    return Space;
  }).factory('gameBoard', function(cfg, Space, PieceDefinitions) {
    var gameBoard, space, x, y, _i, _j, _ref, _ref1;
    gameBoard = {
      locations: [],
      spaces: [],
      pieces: []
    };
    for (x = _i = 0, _ref = cfg.cellCount; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
      gameBoard.locations[x] = [];
      for (y = _j = 0, _ref1 = cfg.cellCount; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        space = new Space({
          x: x,
          y: y
        });
        gameBoard.spaces.push(space);
        gameBoard.locations[x].push(space);
      }
    }
    gameBoard.clearHighlights = function() {
      var _k, _len, _ref2, _results;
      _ref2 = gameBoard.spaces;
      _results = [];
      for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
        space = _ref2[_k];
        _results.push(space.highlight = false);
      }
      return _results;
    };
    gameBoard.showActions = function(piece) {
      var actions, coords, loc, offset, type, _results;
      gameBoard.clearHighlights();
      actions = piece.getActions();
      console.log('highlight actions: ', actions);
      _results = [];
      for (type in actions) {
        coords = actions[type];
        if (type === PieceDefinitions.ACTIONS.move) {
          _results.push((function() {
            var _k, _len, _ref2, _results1;
            _results1 = [];
            for (_k = 0, _len = coords.length; _k < _len; _k++) {
              offset = coords[_k];
              x = piece.x + offset[0];
              y = piece.y + offset[1];
              loc = (_ref2 = gameBoard.locations[x]) != null ? _ref2[y] : void 0;
              if (loc) {
                _results1.push(loc.highlight = true);
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          })());
        } else {
          _results.push(console.warn("coord display rules for type " + type + " not yet implemented"));
        }
      }
      return _results;
    };
    return gameBoard;
  }).directive('gameBoard', function(gameBoard, $window, cfg) {
    return {
      restrict: 'E',
      scope: {},
      template: '<b\n  ng-repeat="space in board.spaces"\n  class="space x{{space.x}} y{{space.y}}"\n  ng-class="{highlight: space.highlight, altColor: (space.x + space.y) % 2 === 0}"\n  title="{{space.x}}, {{space.y}}">\n</b>\n\n<i piece\n   ng-repeat="piece in board.pieces"\n   ng-mousedown="piece.showActions()"\n   class="piece {{piece.type}} x{{piece.x}} y{{piece.y}} team{{piece.team}} side{{piece.getSide()}}">\n  {{piece.type}}\n</i>',
      link: function(scope, el, attrs) {
        var calculateSize;
        scope.board = gameBoard;
        calculateSize = function() {
          var size;
          if ($window.innerWidth > $window.innerHeight) {
            size = window.innerHeight;
          } else {
            size = window.innerWidth;
          }
          size = Math.floor(size);
          size -= 40;
          el.css({
            width: size,
            height: size
          });
          cfg.boardSize = size;
          return cfg.pieceSize = Math.round(size / cfg.cellCount);
        };
        $window.onresize = _.debounce(calculateSize, 200);
        return calculateSize();
      }
    };
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('prince').factory('Piece', function(cfg, gameBoard, PieceDefinitions) {
    var Piece;
    Piece = function(options) {
      var definition;
      definition = PieceDefinitions[options.type];
      if (!definition) {
        console.warn("No Piece Definition found for type: " + options.type);
      }
      angular.extend(this, definition);
      this.x = options.x;
      return this.y = options.y;
    };
    Piece.prototype = {
      x: void 0,
      y: void 0,
      actionCount: 0,
      getSide: function() {
        if (this.actionCount % 2 === 0) {
          return 0;
        } else {
          return 1;
        }
      },
      getActions: function() {
        return this.actions[this.getSide()];
      },
      showActions: function() {
        return gameBoard.showActions(this);
      },
      act: function(pos) {
        gameBoard.clearHighlights();
        if (pos.x < 0) {
          return 'off the left';
        }
        if (pos.x > cfg.cellCount - 1) {
          return 'off the right';
        }
        if (pos.y < 0) {
          return 'off the top';
        }
        if (pos.y > cfg.cellCount - 1) {
          return 'off the bottom';
        }
        if (!((pos.x != null) && (pos.y != null))) {
          return 'missing a position';
        }
        if (pos.x === this.x && pos.y === this.y) {
          return 'already in this position';
        } else {
          this.x = pos.x;
          this.y = pos.y;
          return this.actionCount++;
        }
      },
      team: 0
    };
    return Piece;
  }).directive('piece', function(cfg) {
    return {
      restrict: 'A',
      link: function(scope, el, attrs) {
        var draggie, setPosition;
        draggie = new Draggabilly(el[0]);
        draggie.on('dragEnd', function(draggie, evt, pointer) {
          var col, pos, row;
          if (!cfg.pieceSize) {
            console.warn('can not position piece without knowing size');
          }
          col = Math.round(draggie.position.x / cfg.pieceSize);
          row = Math.round(draggie.position.y / cfg.pieceSize);
          pos = {
            x: col,
            y: row
          };
          return setPosition(pos);
        });
        return setPosition = function(pos) {
          draggie.element.style.left = null;
          draggie.element.style.top = null;
          return scope.$apply(function() {
            return console.log(scope.piece.act(pos));
          });
        };
      }
    };
  });

}).call(this);
